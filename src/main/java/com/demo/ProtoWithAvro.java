package com.demo;

import org.apache.avro.Schema;
import org.apache.avro.file.CodecFactory;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.DataFileWriter;
import org.apache.avro.file.FileReader;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.generic.GenericRecord;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.DecoderFactory;
import org.apache.avro.io.Encoder;
import org.apache.avro.io.EncoderFactory;
import org.apache.avro.protobuf.ProtobufData;
import org.apache.avro.protobuf.ProtobufDatumReader;
import org.apache.avro.protobuf.ProtobufDatumWriter;
import org.xerial.snappy.SnappyCodec;

import com.example.tutorial.RealTimeBiddingProtos;
import com.example.tutorial.RealTimeBiddingProtos.BidRequest;
import com.google.openbidder.containers.NativeRtbContainer;
import com.google.protobuf.InvalidProtocolBufferException;


import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
public class ProtoWithAvro {
	public static void main(String[] args) throws IOException {
        System.out.println("******************************************************************************");
        System.out.println("******** DTO classes generated by Protobuff protoc can be used with Avro *****");
        System.out.println("******************************************************************************");
        byte[] data = null;
		NativeRtbContainer.RequestContainer bdreq1=null;
		BidRequest req=null;
		String data
		//System.out.println("data1size"+data.toString();
		data = sampleTest.hexStringToByteArray(data1);
		System.out.println("data"+data);
		String hexstring=sampleTest.byteArrayToHexString(data);
		 try {
	    	 bdreq1=NativeRtbContainer.RequestContainer.parseFrom(data);
			System.out.println("bdreq1000000000"+bdreq1.getSerializedSize());
		     req=BidRequest.parseFrom(bdreq1.getRequest().toByteArray());
		    // String jsonView = com.googlecode.protobuf.format.JsonFormat.printToString(req);
			System.out.println("req....."+req.getSerializedSize());
			//System.out.println("jsonView of proto"+jsonView);
			
		} catch (InvalidProtocolBufferException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        // build a protobuff dto
        //RealTimeBiddingProtos.BidRequest.Builder builder = RealTimeBiddingProtos.BidRequest.newBuilder();
        //builder.setTitle("coucou !");
       // RealTimeBiddingProtos.BidRequest req = builder.build();
        

//        // serialize with avro this dto
//        ProtobufDatumWriter<RealTimeBiddingProtos.BidRequest> datumWriter = new ProtobufDatumWriter<RealTimeBiddingProtos.BidRequest>(RealTimeBiddingProtos.BidRequest.class);
//        ByteArrayOutputStream os = new ByteArrayOutputStream();
//        Encoder e = EncoderFactory.get().binaryEncoder(os, null);
//        datumWriter.write(req, e);
//        e.flush();
//
//        // deserialize with avro the former dto
//        ProtobufDatumReader<RealTimeBiddingProtos.BidRequest> datumReader = new ProtobufDatumReader<RealTimeBiddingProtos.BidRequest>(RealTimeBiddingProtos.BidRequest.class);
//        Object o = datumReader.read
//                (null,
//                        DecoderFactory.get().binaryDecoder(new ByteArrayInputStream(os.toByteArray()), null));
//
//        System.out.println("Protobuff DTO deserialized by avro " + o);
//
//        // deserialize with avro, without using the protobuff dto
//        GenericDatumReader<GenericRecord> genericDatumReader = new GenericDatumReader<GenericRecord>(datumReader.getSchema());
//        GenericRecord record = genericDatumReader.read(null, DecoderFactory.get().binaryDecoder(new ByteArrayInputStream(os.toByteArray()), null));
//        System.out.println("Avro Record deserialized data " + record.toString());
//        System.out.println("Avro Record deserialized Schema " + record.getSchema().toString());

		 
		 
		 
        
        ProtobufDatumWriter<RealTimeBiddingProtos.BidRequest> pbWriter = new ProtobufDatumWriter<RealTimeBiddingProtos.BidRequest>(RealTimeBiddingProtos.BidRequest.class);
        DataFileWriter<RealTimeBiddingProtos.BidRequest> dataFileWriter = new DataFileWriter<RealTimeBiddingProtos.BidRequest>(pbWriter);
        Schema schema= ProtobufData.get().getSchema(RealTimeBiddingProtos.BidRequest.class);
        System.out.println("schema"+schema);
        //String path = "/var" +File.separator +"/"+"avro" +File.separator +"/"+  new SimpleDateFormat("yyyyMMddhhmmssSSS'.avro'").format(new Date());
        String path = "D:" +File.separator +"\\"+"logs" +File.separator +"\\"+  new SimpleDateFormat("yyyyMMddhhmmssSSS'.avro'").format(new Date());
        //String fileName = new SimpleDateFormat("yyyyMMddhhmmssSSS'.avro'").format(new Date());
       // String fileName = new SimpleDateFormat("/var/log/open-bidder/yyyyMMddhhmm'.avro'").format(new Date());
        dataFileWriter.setCodec(CodecFactory.snappyCodec()); 
        dataFileWriter.create(schema, new File(path)); 
        dataFileWriter.append(req);
        dataFileWriter.close();


    }
}
